package Gpcs.oracle.apps.ak.gpcs.server;

import java.sql.Array;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;

import oracle.jdbc.*;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GpcsAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
     Map<String,String> map=new  HashMap<String,String>();
    public GpcsAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("Gpcs.oracle.apps.ak.gpcs.server", /* package name */
      "GpcsAMLocal" /* Configuration Name */);
    }

    /**Container's getter for CountryOfOriginVO1
     */
    public CountryOfOriginVOImpl getCountryOfOriginVO1() {
        return (CountryOfOriginVOImpl)findViewObject("CountryOfOriginVO1");
    }

    /**Container's getter for GPCSVO1
     */
    public GPCSVOImpl getGPCSVO1() {
        return (GPCSVOImpl)findViewObject("GPCSVO1");
    }

    /**Container's getter for HSTCCCodeVO1
     */
    public HSTCCCodeVOImpl getHSTCCCodeVO1() {
        return (HSTCCCodeVOImpl)findViewObject("HSTCCCodeVO1");
    }

    /**Container's getter for IndiaVAProductGroupVO1
     */
    public IndiaVAProductGroupVOImpl getIndiaVAProductGroupVO1() {
        return (IndiaVAProductGroupVOImpl)findViewObject("IndiaVAProductGroupVO1");
    }

    /**Container's getter for ItemTypeVO1
     */
    public ItemTypeVOImpl getItemTypeVO1() {
        return (ItemTypeVOImpl)findViewObject("ItemTypeVO1");
    }

    /**Container's getter for OUVO1
     */
    public OUVOImpl getOUVO1() {
        return (OUVOImpl)findViewObject("OUVO1");
    }

    /**Container's getter for SOBVO1
     */
    public SOBVOImpl getSOBVO1() {
        return (SOBVOImpl)findViewObject("SOBVO1");
    }

    /**Container's getter for TemplateVO1
     */
    public TemplateVOImpl getTemplateVO1() {
        return (TemplateVOImpl)findViewObject("TemplateVO1");
    }
    //根据ItemNo 查询数据
    public void queryGpcs(String ItemNo)
    {
        GPCSVOImpl vo=this.getGPCSVO1();
        vo.clearCache();
        String whereclause = "itemnumber = '"+ ItemNo +"'"; //组合条件语句
        vo.setWhereClause(whereclause);
        vo.executeQuery();
        whereclause=null;
        TemplateVOImpl tVO=getTemplateVO1();
        tVO.clearCache();
        whereclause = "ATTRIBUTE1 LIKE  '%' || (SELECT  pb_item_type AS itemtype FROM apps.xxin_gpcs_ppart WHERE ppart = '"+ ItemNo +"' ) || '%' AND template \n" + 
        " NOT LIKE '%MQE%'AND rownum=1"; //组合条件语句
        tVO.setWhereClause(whereclause);
        tVO.executeQuery();
        whereclause=null;
        GPCSLoginVOImpl xxVO=this.getGPCSLoginVO1();
        xxVO.clearCache();
        whereclause="itemnumber = '"+ ItemNo +"'";
        xxVO.setWhereClause(whereclause);
        xxVO.executeQuery();
        if(xxVO.getRowCount()>0)
        {
            this.CompareCpcs(xxVO,vo,tVO);
        }
       
    
    }
    //点击Clear清除VO数据
    public void clearVO()
    {
        ViewObject vo=findViewObject("GPCSVO1");
        if( vo.getCurrentRow()!=null)
        {
            vo.getCurrentRow().remove();
        }
    }
    //查询SOBVO
    public void  querySOBVO(String as){
        SOBVOImpl VO= getSOBVO1();
        VO.clearCache();
        String whereclause = "UPPER (attribute2)='"+ as +"'"; //组合条件语句
        VO.setWhereClause(whereclause);
        VO.executeQuery();
        
        
    }


    //js设置全部勾选
     public  void JsSetALL(String s)
    {
       SOBVOImpl xxVo= getSOBVO1();
       SOBVORowImpl hRow = null;
       int rowcount = xxVo.getFetchedRowCount(); //取当前提取的记录集的记录数
       if (rowcount > 0)
       {
            RowSetIterator deleteIter = xxVo.createRowSetIterator("deleteIter"); //建立记录集的指示器
            deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
            deleteIter.setRangeSize(rowcount); //设置循环次数
             for (int i = 0; i < rowcount; i++)
             {
                 hRow = (SOBVORowImpl)deleteIter.getRowAtRangeIndex(i); //取得当前记录
                 hRow.setSelectflag(s);
                 this.setOUSelect(s,hRow);
              }
             deleteIter.closeRowSetIterator();
            
           }
       }
    
    //勾选OU
    public void setOUSelect(String s,SOBVORowImpl hRow)
    {
        RowIterator tt=hRow.getOUVO();
        for(int j=0;j< tt.getRowCount();j++)
        {
            tt.getRowAtRangeIndex(j).setAttribute("Selectflag",s);
        } 
    }
    
    //js设置sob勾选
    public  void JsSetSOB(String sobname,String check)
    {
       SOBVOImpl xxVo= getSOBVO1();
       SOBVORowImpl hRow = null;
       int rowcount = xxVo.getFetchedRowCount(); //取当前提取的记录集的记录数
       if (rowcount > 0)
       {
            RowSetIterator deleteIter = xxVo.createRowSetIterator("deleteIter"); //建立记录集的指示器
            deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
            deleteIter.setRangeSize(rowcount); //设置循环次数
            for (int i = 0; i < rowcount; i++)
            {
                hRow = (SOBVORowImpl)deleteIter.getRowAtRangeIndex(i); //取得当前记录
                String LedgerShortName = hRow.getLedgerShortName(); //取得删除依据的主键值.
                if(LedgerShortName.equals(sobname))
                {
                    if ("true".equals(check)) 
                    {
                        this.setOUSelect("Y",hRow);  
                    }else
                    { 
                        this.setOUSelect("N",hRow);  
                    }
                    break;
                }
                
             }
             deleteIter.closeRowSetIterator();
         }
    
    }
    //js设置OU勾选
    public  void JsSetOU(String OUName,String check)
    {
      String LedgerShortName=this.getSOBLedgerShortNamebyOuName(OUName);
      SOBVOImpl xxVo= getSOBVO1();
      SOBVORowImpl hRow = null;
      int rowcount = xxVo.getFetchedRowCount(); //取当前提取的记录集的记录数
      RowSetIterator deleteIter = xxVo.createRowSetIterator("deleteIter"); //建立记录集的指示器
      deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
      deleteIter.setRangeSize(rowcount); //设置循环次数
      boolean flag=true;
      for (int i = 0; i < rowcount; i++)
      {
          hRow = (SOBVORowImpl)deleteIter.getRowAtRangeIndex(i);
          if(hRow.getLedgerShortName().equals(LedgerShortName))
          {
              RowIterator tt = hRow.getOUVO();
              for(int j=0;j< tt.getRowCount();j++)
              {
                  String selectflag=tt.getRowAtRangeIndex(j).getAttribute("Selectflag").toString();
                  if(selectflag.equals("Y"))
                  {
                      flag=true;
                      break;
                  }
                  else
                  {
                      flag=false;

                  } 
                 
              }
              break;
          }
       }
     System.out.println(flag);
      if(flag)
      {
          hRow.setAttribute("Selectflag","Y");
      }
      else
      {
          hRow.setAttribute("Selectflag","N");
      }
      deleteIter.closeRowSetIterator();
    }
    
    //根据OUName 查询SOB的LedgerShortName
    public  String getSOBLedgerShortNamebyOuName(String OUName)
    {
      String sobid="";
      ViewObject xxVo = findViewObject("OUVO1");
      oracle.jbo.Row hRow = null;
      int rowcount = xxVo.getRowCount(); //取当前提取的记录集的记录数
      if (rowcount > 0)
      {
           RowSetIterator deleteIter = xxVo.createRowSetIterator("deleteIter"); //建立记录集的指示器
           deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
           deleteIter.setRangeSize(rowcount); //设置循环次数
           for (int i = 0; i < rowcount; i++)
           {
               hRow = deleteIter.getRowAtRangeIndex(i);
               if(hRow.getAttribute("OrgName").equals(OUName))
               {
                   sobid=hRow.getAttribute("LedgerShortName").toString();
                   break;
               }
            }
            deleteIter.closeRowSetIterator();
        }
        return sobid;
    }
    
    //获取所有勾选的ou
    public List<String> getOUList()
    {
        List<String> orglist=new ArrayList<String> ();
        SOBVOImpl xxVo= getSOBVO1();
        SOBVORowImpl hRow = null;
        int rowcount = xxVo.getFetchedRowCount(); //取当前提取的记录集的记录数
        RowSetIterator deleteIter = xxVo.createRowSetIterator("deleteIter"); //建立记录集的指示器
        deleteIter.setRangeStart(0); //设置循环起点,相当于移动指针到第一条记录
        deleteIter.setRangeSize(rowcount); //设置循环次数
        for (int i = 0; i < rowcount; i++)
        {
            hRow = (SOBVORowImpl)deleteIter.getRowAtRangeIndex(i);
            RowIterator tt = hRow.getOUVO();
            for(int j=0;j< tt.getRowCount();j++)
            {
                String selectflag=tt.getRowAtRangeIndex(j).getAttribute("Selectflag").toString();
                if(selectflag.equals("Y"))
                {
                   orglist.add(tt.getRowAtRangeIndex(j).getAttribute("OrgCode").toString());
                }
            
            }
        }
        deleteIter.closeRowSetIterator();
        return orglist;
    }
    //调用存储过程save_to_addon
    public String save_to_addon(String ApplySite,String CountryOfOrigin,String JanCode,String HSTCCCode,String IndiaVATProductGroup,int userid,String LocalModel,String LongDescription)
    {
        String orglist=this.getOUList().toString().substring(1,this.getOUList().toString().length()-1);
        GPCSVORowImpl GPCSRow=(GPCSVORowImpl)getGPCSVO1().getCurrentRow();
        TemplateVORowImpl TemplateRow =(TemplateVORowImpl)getTemplateVO1().getCurrentRow();
        int m_HeaderID=0;
        String returnCode = "";
        String returnMessage = "";
        OADBTransaction oadbtransaction = (OADBTransaction) getDBTransaction();
        String s="BEGIN apps.xxin_gpcs_pkg.save_to_addon( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , \n" + 
        " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ,  ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , \n" + 
        " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , \n" + 
        " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , \n" + 
        " ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ,  \n" + 
        " ? , ? , ? , ? , ? , ? , ? , ?); END;";
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement) oadbtransaction.createCallableStatement(s,1);
        try{
            
            //给定参数
            oraclecallablestatement.setString(1,ApplySite);
            oraclecallablestatement.setString(2,"GPCS");
            oraclecallablestatement.setString(3,null);
            oraclecallablestatement.setString(4,GPCSRow.getItemnumber().toUpperCase());
            oraclecallablestatement.setString(5,null);
            oraclecallablestatement.setString(6,GPCSRow.getDescription());
            oraclecallablestatement.setString(7,LongDescription);
            oraclecallablestatement.setString(8,GPCSRow.getMarketdescription());
            oraclecallablestatement.setString(9,TemplateRow.getTemplate());
            oraclecallablestatement.setString(10,GPCSRow.getItemtype());
            oraclecallablestatement.setString(11,GPCSRow.getPrimaryuomcode());
            oraclecallablestatement.setString(12,null);
            oraclecallablestatement.setString(13,GPCSRow.getProductline());
            oraclecallablestatement.setString(14,GPCSRow.getBigclass());
            oraclecallablestatement.setString(15,GPCSRow.getMiddleclass());
            oraclecallablestatement.setString(16,GPCSRow.getMarketingmodel());
            oraclecallablestatement.setString(17,GPCSRow.getColor());
            oraclecallablestatement.setString(18,GPCSRow.getBrandname());
            oraclecallablestatement.setString(19,null);
            oraclecallablestatement.setString(20,CountryOfOrigin);
            oraclecallablestatement.setString(21,GPCSRow.getEancode());
            oraclecallablestatement.setString(22,null);
            oraclecallablestatement.setString(23,GPCSRow.getUpccode());
            oraclecallablestatement.setString(24,JanCode);
            oraclecallablestatement.setString(25,null);
            oraclecallablestatement.setString(26,null);
            oraclecallablestatement.setString(27,null);
            oraclecallablestatement.setString(28,null);
            oraclecallablestatement.setString(29,null);
            oraclecallablestatement.setString(30,null);
            oraclecallablestatement.setString(31,null);
            oraclecallablestatement.setString(32,null);
            oraclecallablestatement.setString(33,"A");
            oraclecallablestatement.setString(34,LocalModel);
            oraclecallablestatement.setString(35,HSTCCCode);
            oraclecallablestatement.setString(36,null);
            oraclecallablestatement.setString(37,null);
            oraclecallablestatement.setString(38,null);
            oraclecallablestatement.setString(39,null);
            oraclecallablestatement.setString(40,null);
            oraclecallablestatement.setString(41,null);
            oraclecallablestatement.setString(42,null);
            oraclecallablestatement.setString(43,null);
            oraclecallablestatement.setString(44,null);
            oraclecallablestatement.setString(45,null);
            oraclecallablestatement.setString(46,null);
            oraclecallablestatement.setString(47,null);
            oraclecallablestatement.setString(48,null);
            oraclecallablestatement.setString(49,null);
            oraclecallablestatement.setString(50,null);
            oraclecallablestatement.setString(51,IndiaVATProductGroup);
            oraclecallablestatement.setString(52,null);
            oraclecallablestatement.setString(53,null);
            oraclecallablestatement.setInt(54,-1);
            oraclecallablestatement.setInt(55,userid);
            oraclecallablestatement.setInt(56,-1);
            oraclecallablestatement.setString(57,"Metric");
            oraclecallablestatement.setString(58,null);
            oraclecallablestatement.setString(59,null);
            oraclecallablestatement.setInt(60,0);
            oraclecallablestatement.setInt(61,0);
            oraclecallablestatement.setInt(62,0);
            oraclecallablestatement.setString(63,orglist);
            oraclecallablestatement.setString(64,GPCSRow.getProductsegment());
            oraclecallablestatement.setString(65,GPCSRow.getFgbigclass());
            
            oraclecallablestatement.registerOutParameter(66,OracleTypes.VARCHAR);
            oraclecallablestatement.registerOutParameter(67,OracleTypes.VARCHAR);
            oraclecallablestatement.registerOutParameter(68,OracleTypes.VARCHAR);
            
           
            //执行存储过程
            oraclecallablestatement.execute();
            returnCode=oraclecallablestatement.getString(67);
            returnMessage=oraclecallablestatement.getString(68);
            if (returnCode.toUpperCase() == "S")
            { 
               m_HeaderID=Integer.parseInt(oraclecallablestatement.getString(66));             
            }
            map.put("headerId",oraclecallablestatement.getString(66));
            getTransaction().commit();
        }
        catch(Exception e)
        {
                e.printStackTrace();
        }
        finally{
            try{
                oraclecallablestatement.close();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
           
        }
        return returnMessage;
    }
    
    //调用存储过程update_pallet_shipway
    public void update_pallet_shipway(String ApplySite)
    {
        String returnCode = "";
        String returnMessage = "";
        GPCSVORowImpl GPCSRow=(GPCSVORowImpl)getGPCSVO1().getCurrentRow();
        OADBTransaction oadbtransaction = (OADBTransaction) getDBTransaction();
        String s="  BEGIN apps.xxin_gpcs_pkg.update_pallet_shipway (?,?,?,?); END;";
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement) oadbtransaction.createCallableStatement(s,1);
        try{
            oraclecallablestatement.setString(1,ApplySite);
            oraclecallablestatement.setString(2,GPCSRow.getItemnumber());
            oraclecallablestatement.registerOutParameter(3,OracleTypes.VARCHAR);
            oraclecallablestatement.registerOutParameter(4,OracleTypes.VARCHAR);
            oraclecallablestatement.execute();
            returnCode=oraclecallablestatement.getString(3);
            returnMessage=oraclecallablestatement.getString(4);
            getTransaction().commit();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally{
            try{
                oraclecallablestatement.close();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
           
        }
        System.out.println(returnCode+":"+returnMessage);
       
    }
    //调用存储过程
    public void import_items(int userid)
    {
        String returnCode = "";
        String returnMessage = "";
        String o_request_id="";
        OADBTransaction oadbtransaction = (OADBTransaction) getDBTransaction();
        String s="   BEGIN   apps.xxin_gpcs_pkg.import_items(?,?,?,?,?,?);END;";
        OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement) oadbtransaction.createCallableStatement(s,1);
        try{
            oraclecallablestatement.setString(1,null);
            oraclecallablestatement.setString(2,map.get("headerId"));
            oraclecallablestatement.setInt(3,userid);
            oraclecallablestatement.registerOutParameter(4,OracleTypes.VARCHAR);
            oraclecallablestatement.registerOutParameter(5,OracleTypes.VARCHAR);
            oraclecallablestatement.registerOutParameter(6,OracleTypes.VARCHAR);
            oraclecallablestatement.execute();
            o_request_id=oraclecallablestatement.getString(4);
            returnCode=oraclecallablestatement.getString(5);
            returnMessage=oraclecallablestatement.getString(6);
            getTransaction().commit();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally{
            try{
                oraclecallablestatement.close();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
           
        }
    }
    
    public void ApplytoOracle(String ApplySite,String CountryOfOrigin,String JanCode,String HSTCCCode,String IndiaVATProductGroup,String  UserID,String LocalModel,String LongDescription)
    {
        
       if(getOUList()==null||getOUList().size()==0) 
       {
           String message = "Please choose at least one org";
           throw new OAException(message,OAException.INFORMATION);
       }
        this.save_to_addon(ApplySite,CountryOfOrigin,JanCode,HSTCCCode,IndiaVATProductGroup,Integer.parseInt(UserID),LocalModel,LongDescription);
//        this.update_pallet_shipway(ApplySite);
        this.import_items(Integer.parseInt(UserID));
        
    }

    /**Container's getter for GPCSLoginVO1
     */
    public GPCSLoginVOImpl getGPCSLoginVO1() {
        return (GPCSLoginVOImpl)findViewObject("GPCSLoginVO1");
    }
    
    public void CompareCpcs(GPCSLoginVOImpl xxVo,GPCSVOImpl vo, TemplateVOImpl tVO){
   
        GPCSLoginVORowImpl Row=(GPCSLoginVORowImpl) xxVo.getAllRowsInRange()[0];
        GPCSVORowImpl hRow=(GPCSVORowImpl) vo.getAllRowsInRange()[0];
        TemplateVORowImpl tRow= (TemplateVORowImpl)tVO.getAllRowsInRange()[0];
        hRow.setDescription(Row.getDescription());
        hRow.setMarketdescription(Row.getMarketdescription());
        tRow.setTemplate(Row.getTemplatename());
        hRow.setItemtype(Row.getItemtype());
        hRow.setProductline(Row.getProductline());
        hRow.setMarketingmodel(Row.getMarketingmodel());
        hRow.setPrimaryuomcode(Row.getPrimaryuomcode());
    }
}
